// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: cities.sql

package database

import (
	"context"
)

const citiesCount = `-- name: CitiesCount :one
SELECT COUNT(*)
FROM cities
`

func (q *Queries) CitiesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, citiesCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCity = `-- name: CreateCity :one
INSERT INTO cities(name_en, name_ar, is_active)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateCityParams struct {
	NameEn   string
	NameAr   string
	IsActive bool
}

func (q *Queries) CreateCity(ctx context.Context, arg CreateCityParams) (int64, error) {
	row := q.db.QueryRow(ctx, createCity, arg.NameEn, arg.NameAr, arg.IsActive)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listActiveCity = `-- name: ListActiveCity :many
SELECT id, name_en, name_ar, is_active
FROM cities
WHERE is_active = true
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListActiveCityParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListActiveCity(ctx context.Context, arg ListActiveCityParams) ([]City, error) {
	rows, err := q.db.Query(ctx, listActiveCity, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []City
	for rows.Next() {
		var i City
		if err := rows.Scan(
			&i.ID,
			&i.NameEn,
			&i.NameAr,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllCities = `-- name: ListAllCities :many
SELECT id, name_en, name_ar, is_active
FROM cities
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListAllCitiesParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListAllCities(ctx context.Context, arg ListAllCitiesParams) ([]City, error) {
	rows, err := q.db.Query(ctx, listAllCities, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []City
	for rows.Next() {
		var i City
		if err := rows.Scan(
			&i.ID,
			&i.NameEn,
			&i.NameAr,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
