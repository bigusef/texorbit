// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const changeUserStatus = `-- name: ChangeUserStatus :exec
UPDATE users
SET status=$1
WHERE id=$2
`

type ChangeUserStatusParams struct {
	Status AccountStatus
	ID     int64
}

func (q *Queries) ChangeUserStatus(ctx context.Context, arg ChangeUserStatusParams) error {
	_, err := q.db.Exec(ctx, changeUserStatus, arg.Status, arg.ID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users(email, is_staff, join_date, last_login)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateUserParams struct {
	Email     string
	IsStaff   bool
	JoinDate  pgtype.Timestamptz
	LastLogin pgtype.Timestamptz
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.IsStaff,
		arg.JoinDate,
		arg.LastLogin,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
Select id, name, email, phone_number, avatar, status, is_staff, join_date, last_login
FROM users
WHERE id=$1
`

func (q *Queries) GetUserByEmail(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.Avatar,
		&i.Status,
		&i.IsStaff,
		&i.JoinDate,
		&i.LastLogin,
	)
	return i, err
}
