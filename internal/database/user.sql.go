// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const allStaffUser = `-- name: AllStaffUser :many
SELECT id, name, email, phone_number, avatar, status, is_staff, join_date, last_login
FROM users
WHERE is_staff = TRUE
ORDER BY join_date DESC
LIMIT $1 OFFSET $2
`

type AllStaffUserParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) AllStaffUser(ctx context.Context, arg AllStaffUserParams) ([]User, error) {
	rows, err := q.db.Query(ctx, allStaffUser, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.PhoneNumber,
			&i.Avatar,
			&i.Status,
			&i.IsStaff,
			&i.JoinDate,
			&i.LastLogin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createUser = `-- name: CreateUser :one
INSERT INTO users(name, email, avatar, is_staff, join_date, last_login)
VALUES ($1, $2, $3, $4, NOW(), NOW())
RETURNING id, name, email, phone_number, avatar, status, is_staff, join_date, last_login
`

type CreateUserParams struct {
	Name    string
	Email   string
	Avatar  pgtype.Text
	IsStaff bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Avatar,
		arg.IsStaff,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.Avatar,
		&i.Status,
		&i.IsStaff,
		&i.JoinDate,
		&i.LastLogin,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
Select id, name, email, phone_number, avatar, status, is_staff, join_date, last_login
FROM users
WHERE email=$1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PhoneNumber,
		&i.Avatar,
		&i.Status,
		&i.IsStaff,
		&i.JoinDate,
		&i.LastLogin,
	)
	return i, err
}

const staffCount = `-- name: StaffCount :one
SELECT COUNT(*)
FROM users
WHERE is_staff = TRUE
`

func (q *Queries) StaffCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, staffCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}
